generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id @default(cuid())
  name                     String?
  email                    String               @unique
  password                 String
  avatar                   String?              @default("default")
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  emailVerified            DateTime?
  resetToken               String?              @unique
  resetTokenExpires        DateTime?
  verificationToken        String?              @unique
  verificationTokenExpires DateTime?
  mountainProgress         MountainCompletion[]
  mountainRatings          MountainRating[]
  walkProgress            WalkCompletion[]
  walkRatings             WalkRating[]
  following                Follow[]             @relation("Following")
  followers                Follow[]             @relation("Followers")
  sentNotifications        Notification[]        @relation("NotificationSender")
  receivedNotifications    Notification[]        @relation("NotificationRecipient")
}

model MountainCompletion {
  id          String   @id @default(cuid())
  userId      String
  mountainId  Int
  completedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, mountainId])
}

model MountainRating {
  id         String   @id @default(cuid())
  userId     String
  mountainId Int
  rating     Float
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, mountainId])
}

model WalkCompletion {
  id          String   @id @default(cuid())
  userId      String
  walkName    String
  completedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, walkName])
}

model WalkRating {
  id         String   @id @default(cuid())
  userId     String
  walkName   String
  rating     Float
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, walkName])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // e.g., 'MOUNTAIN_COMPLETED', 'FOLLOWED', etc.
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  senderId    String
  recipientId String
  mountainId  Int?     // Optional, only for mountain-related notifications
  sender      User     @relation("NotificationSender", fields: [senderId], references: [id])
  recipient   User     @relation("NotificationRecipient", fields: [recipientId], references: [id])

  @@index([recipientId])
  @@index([senderId])
  @@index([createdAt])
}
